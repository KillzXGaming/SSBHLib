using OpenTK.Graphics.OpenGL;
using SFGraphics.GLObjects.Shaders;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace CrossMod.Rendering.GlTools
{
    /// <summary>
    /// Stores all <see cref="Shader"/> instances used for rendering.
    /// </summary>
    public static class ShaderContainer
    {
        private static readonly string shaderFolder = "Shaders";

        private static readonly Dictionary<string, ShaderType> shaderTypeByExtension = new Dictionary<string, ShaderType>
        {
            { ".vert", ShaderType.VertexShader },
            { ".frag", ShaderType.FragmentShader },
            { ".geom", ShaderType.GeometryShader },
        };

        private static readonly SFShaderLoader.ShaderLoader shaderLoader = new SFShaderLoader.ShaderLoader();

        public static bool HasSetUp { get; private set; }
        public static Shader GetCurrentRModelShader()
        {
            if (RenderSettings.Instance.RenderUVs)
                return GetShader("RModelUV");
            if (RenderSettings.Instance.UseDebugShading)
                return GetShader("RModelDebug");

            return GetShader("RModel");
        }

        public static Shader GetShader(string name)
        {
            return shaderLoader.GetShader(name);
        }

        public static void SetUpShaders()
        {
            UpdateShaderSources(shaderFolder);
            CreateAllShaders();

            HasSetUp = true;
        }

        private static void CreateAllShaders()
        {
            CreateRModelShader();
            CreateRModelUvShader();
            CreateTextureShader();
            CreateTextureCubeShader();
            CreateScreenTextureShader();
            CreateScreenBloomCombinedShader();
            CreateScreenGradientShader();
            CreateSphereShader();
            CreateCapsuleShader();
            CreateLineShader();
            CreatePolygonShader();

            // TODO: This shader can be generated by SFGraphics.
            CreateRModelDebugShader();
        }

        private static void UpdateShaderSources(string shaderFolder)
        {
            var shaderFiles = Directory.EnumerateFiles(shaderFolder, "*.*", SearchOption.AllDirectories).Where(f => shaderTypeByExtension.Keys.Contains(Path.GetExtension(f)));
            foreach (var file in shaderFiles)
            {
                // TODO: The names may not be unique if a file appears in multiple folders.
                var source = File.ReadAllText(file);
                var name = Path.GetFileName(file);
                shaderLoader.AddSource(name, source, shaderTypeByExtension[Path.GetExtension(file)]);
            }
        }

        public static void ReloadShaders()
        {
            SetUpShaders();

            // TODO: Log errors for all shaders.
            var modelShader = GetShader("RModel");
            var debugShader = GetShader("RModelDebug");

            Directory.CreateDirectory("Error Logs");
            File.WriteAllText("Error Logs//RModel_shader_errors.txt", modelShader.GetErrorLog());
            File.WriteAllText("Error Logs//RModelDebug_shader_errors.txt", debugShader.GetErrorLog());
        }

        private static void CreateTextureShader()
        {
            shaderLoader.AddShader("RTexture",
                "Texture.vert",
                "Texture.frag",
                "Gamma.frag"
            );
        }

        private static void CreateTextureCubeShader()
        {
            shaderLoader.AddShader("RTextureCube",
                "TextureCube.vert",
                "TextureCube.frag",
                "Gamma.frag"
            );
        }

        private static void CreateScreenTextureShader()
        {
            shaderLoader.AddShader("ScreenTexture",
                "Texture.vert",
                "ScreenTexture.frag"
            );
        }
        private static void CreateScreenBloomCombinedShader()
        {
            shaderLoader.AddShader("ScreenBloomCombined",
                "Texture.vert",
                "ScreenBloomCombined.frag"
            );
        }

        private static void CreateScreenGradientShader()
        {
            shaderLoader.AddShader("ScreenGradient",
                "Texture.vert",
                "ScreenGradient.frag"
            );
        }

        private static void CreateRModelDebugShader()
        {
            shaderLoader.AddShader("RModelDebug",
                "RModel.vert",
                "RModelDebug.frag",
                "NormalMap.frag",
                "Gamma.frag",
                "Wireframe.frag",
                "TextureLayers.frag",
                "RModel.geom"
            );
        }

        private static void CreateRModelUvShader()
        {
            shaderLoader.AddShader("RModelUV",
                "RModelUV.vert",
                "RModelUV.frag",
                "NormalMap.frag",
                "Gamma.frag",
                "Wireframe.frag",
                "RModel.geom"
            );
        }

        private static void CreateRModelShader()
        {
            shaderLoader.AddShader("RModel",
                "RModel.vert",
                "RModel.geom",
                "RModel.frag",
                "NormalMap.frag",
                "Gamma.frag",
                "Wireframe.frag",
                "TextureLayers.frag"
            );
        }

        private static void CreateSphereShader()
        {
            shaderLoader.AddShader("Sphere",
                "Sphere.vert",
                "SolidColor.frag"
            );
        }

        private static void CreateCapsuleShader()
        {
            shaderLoader.AddShader("Capsule",
                "Capsule.vert",
                "SolidColor.frag"
            );
        }

        private static void CreateLineShader()
        {
            shaderLoader.AddShader("Line",
                "Line.vert",
                "SolidColor.frag"
            );
        }

        private static void CreatePolygonShader()
        {
            shaderLoader.AddShader("Polygon",
                "Polygon.vert",
                "SolidColor.frag"
            );
        }
    }
}
