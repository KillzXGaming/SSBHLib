<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SFGenericModel</name>
    </assembly>
    <members>
        <member name="T:SFGenericModel.IDrawableMesh">
            <summary>
            Defines methods for drawing a mesh using programmable shaders.
            </summary>
        </member>
        <member name="M:SFGenericModel.IDrawableMesh.Draw(SFGraphics.GLObjects.Shaders.Shader)">
            <summary>
            Draws the geometry using the specified shader and camera.
            </summary>
            <param name="shader">The shader used for drawing</param>
        </member>
        <member name="T:SFGenericModel.IndexedVertexData`1">
            <summary>
            Stores indexed vertex data to be used for drawing with OpenGL.
            </summary>
            <typeparam name="T">The struct used for each vertex</typeparam>
        </member>
        <member name="P:SFGenericModel.IndexedVertexData`1.VertexSizeInBytes">
            <summary>
            The size of <typeparamref name="T"/> in bytes.
            </summary>
        </member>
        <member name="P:SFGenericModel.IndexedVertexData`1.Vertices">
            <summary>
            The vertex data.
            </summary>
        </member>
        <member name="P:SFGenericModel.IndexedVertexData`1.Indices">
            <summary>
            The vertex indices. The number of vertices rendered is the number of indices.
            </summary>
        </member>
        <member name="P:SFGenericModel.IndexedVertexData`1.PrimitiveType">
            <summary>
            Determines how primitives will be constructed from the vertex data.
            </summary>
        </member>
        <member name="M:SFGenericModel.IndexedVertexData`1.#ctor(`0[],OpenTK.Graphics.OpenGL.PrimitiveType)">
            <summary>
            Creates a new vertex data container with generated indices.
            </summary>
            <param name="vertices">The vertex data</param>
            <param name="primitiveType">Determines how primitives will be constructed from vertex data</param>
        </member>
        <member name="M:SFGenericModel.IndexedVertexData`1.#ctor(`0[],System.Int32[],OpenTK.Graphics.OpenGL.PrimitiveType)">
            <summary>
            Creates a new vertex data container.
            </summary>
            <param name="vertices">The vertex data</param>
            <param name="indices">The vertex indices</param>
            <param name="primitiveType">Determines how primitives will be constructed from vertex data</param>
        </member>
        <member name="T:SFGenericModel.Materials.UniformBlock">
            <summary>
            Stores a collection of uniforms in a buffer to improve performance and allow sharing uniforms
            between shader programs.
            </summary>
        </member>
        <member name="P:SFGenericModel.Materials.UniformBlock.UniformBlockName">
            <summary>
            The name of the uniform block in the shader.
            </summary>
        </member>
        <member name="P:SFGenericModel.Materials.UniformBlock.BlockBinding">
            <summary>
            The binding point index for the uniform block.
            </summary>
        </member>
        <member name="M:SFGenericModel.Materials.UniformBlock.#ctor(SFGraphics.GLObjects.Shaders.Shader,System.String)">
            <summary>
            Initializes the uniform buffer based on the layout of <paramref name="uniformBlockName"/> in <paramref name="shader"/>.
            </summary>
            <param name="shader">The shader containing the uniform block</param>
            <param name="uniformBlockName">The name of the uniform block in <paramref name="shader"/></param>
            <exception cref="T:System.ArgumentException"><paramref name="uniformBlockName"/> is not an active uniform block in <paramref name="shader"/></exception>
        </member>
        <member name="M:SFGenericModel.Materials.UniformBlock.BindBlock(SFGraphics.GLObjects.Shaders.Shader)">
            <summary>
            Binds the uniform buffer to <see cref="P:SFGenericModel.Materials.UniformBlock.BlockBinding"/> for the appropriate index for <paramref name="shader"/>.
            </summary>
            <param name="shader">The shader containing the uniform block</param>
        </member>
        <member name="M:SFGenericModel.Materials.UniformBlock.SetValue``1(System.String,``0)">
            <summary>
            Sets the associated buffer data for <paramref name="uniformName"/> to <paramref name="value"/>.
            </summary>
            <param name="uniformName">The name of the uniform inside the uniform block</param>
            <param name="value">The new value for the uniform</param>
        </member>
        <member name="M:SFGenericModel.Materials.UniformBlock.SetValues``1(System.String,``0[])">
            <summary>
            Sets the associated buffer data for <paramref name="uniformName"/> to <paramref name="values"/>.
            </summary>
            <param name="uniformName">The name of the uniform inside the uniform block</param>
            <param name="values">The new value for the uniform</param>
        </member>
        <member name="T:SFGenericModel.Materials.GenericMaterial">
            <summary>
            Stores and sets shader uniform values, including textures.
            For best performance for non texture uniforms, use <see cref="T:SFGenericModel.Materials.UniformBlock"/>.
            </summary>
        </member>
        <member name="P:SFGenericModel.Materials.GenericMaterial.InitialTextureUnit">
            <summary>
            Each texture uniform will be assigned to a unique index, starting with this value.
            Defaults to <c>0</c>.
            </summary>
        </member>
        <member name="M:SFGenericModel.Materials.GenericMaterial.#ctor">
            <summary>
            Creates an empty generic material.
            </summary>
        </member>
        <member name="M:SFGenericModel.Materials.GenericMaterial.#ctor(System.Int32)">
            <summary>
            Creates an empty generic material.
            </summary>
            <param name="initialTextureUnit">The starting texture unit for texture uniforms</param>
        </member>
        <member name="M:SFGenericModel.Materials.GenericMaterial.AddFloat(System.String,System.Single)">
            <summary>
            Adds a float uniform to the material.
            </summary>
            <param name="uniformName">The name of the uniform variable</param>
            <param name="value">The value to set for the uniform</param>
        </member>
        <member name="M:SFGenericModel.Materials.GenericMaterial.AddInt(System.String,System.Int32)">
            <summary>
            Adds an int uniform to the material.
            </summary>
            <param name="uniformName">The name of the uniform variable</param>
            <param name="value">The value to set for the uniform</param>
        </member>
        <member name="M:SFGenericModel.Materials.GenericMaterial.AddBoolToInt(System.String,System.Boolean)">
            <summary>
            Converts <paramref name="value"/> to an int. <c>1</c> is true. <c>0</c> is <c>false</c>.
            Adds the resulting int uniform to the material.
            </summary>
            <param name="uniformName">The name of the uniform variable</param>
            <param name="value">The value to set for the uniform</param>
        </member>
        <member name="M:SFGenericModel.Materials.GenericMaterial.AddVector2(System.String,OpenTK.Vector2)">
            <summary>
            Adds a vec2 uniform to the material.
            </summary>
            <param name="uniformName">The name of the uniform variable</param>
            <param name="value">The value to set for the uniform</param>
        </member>
        <member name="M:SFGenericModel.Materials.GenericMaterial.AddVector3(System.String,OpenTK.Vector3)">
            <summary>
            Adds a vec3 uniform to the material.
            </summary>
            <param name="uniformName">The name of the uniform variable</param>
            <param name="value">The value to set for the uniform</param>
        </member>
        <member name="M:SFGenericModel.Materials.GenericMaterial.AddVector4(System.String,OpenTK.Vector4)">
            <summary>
            Adds a vec4 uniform to the material.
            </summary>
            <param name="uniformName">The name of the uniform variable</param>
            <param name="value">The value to set for the uniform</param>
        </member>
        <member name="M:SFGenericModel.Materials.GenericMaterial.AddMatrix4(System.String,OpenTK.Matrix4)">
            <summary>
            Adds a mat4 uniform to the material.
            </summary>
            <param name="uniformName">The name of the uniform variable</param>
            <param name="value">The value to set for the uniform</param>
        </member>
        <member name="M:SFGenericModel.Materials.GenericMaterial.AddTexture(System.String,SFGraphics.GLObjects.Textures.Texture)">
            <summary>
            Adds a sampler uniform to the material.
            </summary>
            <param name="uniformName">The name of the uniform variable</param>
            <param name="value">The value to set for the uniform</param>
        </member>
        <member name="M:SFGenericModel.Materials.GenericMaterial.SetShaderUniforms(SFGraphics.GLObjects.Shaders.Shader)">
            <summary>
            Sets uniform values for all the added uniform values.
            </summary>
            <param name="shader">The shader whose uniforms will be set</param>
        </member>
        <member name="T:SFGenericModel.RenderState.PolygonModeSettings">
            <summary>
            The polygon mode settings set before drawing.
            </summary>
        </member>
        <member name="F:SFGenericModel.RenderState.PolygonModeSettings.Default">
            <summary>
            The default polygon mode settings.
            </summary>
        </member>
        <member name="F:SFGenericModel.RenderState.PolygonModeSettings.materialFace">
            <summary>
            Determines what faces are effected.
            </summary>
        </member>
        <member name="F:SFGenericModel.RenderState.PolygonModeSettings.polygonMode">
            <summary>
            Determines how primitives are drawn.
            </summary>
        </member>
        <member name="M:SFGenericModel.RenderState.PolygonModeSettings.#ctor(OpenTK.Graphics.OpenGL.MaterialFace,OpenTK.Graphics.OpenGL.PolygonMode)">
            <summary>
            
            </summary>
            <param name="materialFace">Determines what faces are effected</param>
            <param name="polygonMode">Determines how primitives are drawn</param>
        </member>
        <member name="M:SFGenericModel.RenderState.PolygonModeSettings.op_Equality(SFGenericModel.RenderState.PolygonModeSettings,SFGenericModel.RenderState.PolygonModeSettings)">
            <summary>
            Compares <paramref name="lhs"/> and <paramref name="rhs"/>
            using <see cref="M:SFGenericModel.RenderState.PolygonModeSettings.Equals(System.Object)"/>.
            </summary>
            <param name="lhs">The left object to compare</param>
            <param name="rhs">The right object to compare</param>
            <returns><c>true</c> if <paramref name="lhs"/> and <paramref name="rhs"/> are equal</returns>
        </member>
        <member name="M:SFGenericModel.RenderState.PolygonModeSettings.op_Inequality(SFGenericModel.RenderState.PolygonModeSettings,SFGenericModel.RenderState.PolygonModeSettings)">
            <summary>
            Compares <paramref name="lhs"/> and <paramref name="rhs"/>
            using <see cref="M:SFGenericModel.RenderState.PolygonModeSettings.Equals(System.Object)"/>.
            </summary>
            <param name="lhs">The left object to compare</param>
            <param name="rhs">The right object to compare</param>
            <returns><c>true</c> if <paramref name="lhs"/> and <paramref name="rhs"/> are not equal</returns>
        </member>
        <member name="M:SFGenericModel.RenderState.PolygonModeSettings.Equals(System.Object)">
            <summary>
            Compares the values of the object's fields with <paramref name="obj"/>
            </summary>
            <param name="obj">The object to compare with the current object</param>
            <returns><c>true</c> if the specified object is equal to the current object</returns>
        </member>
        <member name="M:SFGenericModel.RenderState.PolygonModeSettings.GetHashCode">
            <summary>
            Returns a hash code based on the object's fields.
            </summary>
            <returns>A hash code for the current object</returns>
        </member>
        <member name="T:SFGenericModel.RenderState.AlphaBlendSettings">
            <summary>
            The alpha blending state set before drawing a <see cref="T:SFGenericModel.GenericMesh`1"/>.
            </summary>
        </member>
        <member name="F:SFGenericModel.RenderState.AlphaBlendSettings.Default">
            <summary>
            The default alpha blend settings.
            </summary>
        </member>
        <member name="F:SFGenericModel.RenderState.AlphaBlendSettings.enabled">
            <summary>
            Enables or disables alpha blending.
            </summary>
        </member>
        <member name="F:SFGenericModel.RenderState.AlphaBlendSettings.sourceFactor">
            <summary>
            The source color is multiplied by <see cref="F:SFGenericModel.RenderState.AlphaBlendSettings.sourceFactor"/>.
            </summary>
        </member>
        <member name="F:SFGenericModel.RenderState.AlphaBlendSettings.destinationFactor">
            <summary>
            The destination color is multiplied by <see cref="F:SFGenericModel.RenderState.AlphaBlendSettings.destinationFactor"/>.
            </summary>
        </member>
        <member name="F:SFGenericModel.RenderState.AlphaBlendSettings.blendingEquationRgb">
            <summary>
            The blending operation used for the RGB components.
            </summary>
        </member>
        <member name="F:SFGenericModel.RenderState.AlphaBlendSettings.blendingEquationAlpha">
            <summary>
            The blending operation used for only the alpha component.
            </summary>
        </member>
        <member name="M:SFGenericModel.RenderState.AlphaBlendSettings.#ctor(System.Boolean,OpenTK.Graphics.OpenGL.BlendingFactor,OpenTK.Graphics.OpenGL.BlendingFactor,OpenTK.Graphics.OpenGL.BlendEquationMode,OpenTK.Graphics.OpenGL.BlendEquationMode)">
            <summary>
            
            </summary>
            <param name="enabled"></param>
            <param name="sourceFactor"></param>
            <param name="destinationFactor"></param>
            <param name="blendingEquationRgb"></param>
            <param name="blendingEquationAlpha"></param>
        </member>
        <member name="M:SFGenericModel.RenderState.AlphaBlendSettings.op_Equality(SFGenericModel.RenderState.AlphaBlendSettings,SFGenericModel.RenderState.AlphaBlendSettings)">
            <summary>
            Compares <paramref name="lhs"/> and <paramref name="rhs"/>
            using <see cref="M:SFGenericModel.RenderState.AlphaBlendSettings.Equals(System.Object)"/>.
            </summary>
            <param name="lhs">The left object to compare</param>
            <param name="rhs">The right object to compare</param>
            <returns><c>true</c> if <paramref name="lhs"/> and <paramref name="rhs"/> are equal</returns>
        </member>
        <member name="M:SFGenericModel.RenderState.AlphaBlendSettings.op_Inequality(SFGenericModel.RenderState.AlphaBlendSettings,SFGenericModel.RenderState.AlphaBlendSettings)">
            <summary>
            Compares <paramref name="lhs"/> and <paramref name="rhs"/>
            using <see cref="M:SFGenericModel.RenderState.AlphaBlendSettings.Equals(System.Object)"/>.
            </summary>
            <param name="lhs">The left object to compare</param>
            <param name="rhs">The right object to compare</param>
            <returns><c>true</c> if <paramref name="lhs"/> and <paramref name="rhs"/> are not equal</returns>
        </member>
        <member name="M:SFGenericModel.RenderState.AlphaBlendSettings.Equals(System.Object)">
            <summary>
            Compares the values of the object's fields with <paramref name="obj"/>
            </summary>
            <param name="obj">The object to compare with the current object</param>
            <returns><c>true</c> if the specified object is equal to the current object</returns>
        </member>
        <member name="M:SFGenericModel.RenderState.AlphaBlendSettings.GetHashCode">
            <summary>
            Returns a hash code based on the object's fields.
            </summary>
            <returns>A hash code for the current object</returns>
        </member>
        <member name="T:SFGenericModel.RenderState.AlphaTestSettings">
            <summary>
            The alpha testing state set before drawing a <see cref="T:SFGenericModel.GenericMesh`1"/>.
            </summary>
        </member>
        <member name="F:SFGenericModel.RenderState.AlphaTestSettings.Default">
            <summary>
            The default alpha test settings.
            </summary>
        </member>
        <member name="F:SFGenericModel.RenderState.AlphaTestSettings.enabled">
            <summary>
            Enables or disables alpha testing.
            </summary>
        </member>
        <member name="F:SFGenericModel.RenderState.AlphaTestSettings.alphaFunction">
            <summary>
            The function used to determine if a fragment passes the alpha test.
            </summary>
        </member>
        <member name="F:SFGenericModel.RenderState.AlphaTestSettings.referenceAlpha">
            <summary>
            The comparison value used for <see cref="F:SFGenericModel.RenderState.AlphaTestSettings.alphaFunction"/>.
            <c>1.0</c> is opaque. <c>0.0</c> is transparent.
            </summary>
        </member>
        <member name="M:SFGenericModel.RenderState.AlphaTestSettings.#ctor(System.Boolean,OpenTK.Graphics.OpenGL.AlphaFunction,System.Single)">
            <summary>
            
            </summary>
            <param name="enabled"></param>
            <param name="alphaFunction"></param>
            <param name="referenceAlpha"></param>
        </member>
        <member name="M:SFGenericModel.RenderState.AlphaTestSettings.op_Equality(SFGenericModel.RenderState.AlphaTestSettings,SFGenericModel.RenderState.AlphaTestSettings)">
            <summary>
            Compares <paramref name="lhs"/> and <paramref name="rhs"/>
            using <see cref="M:SFGenericModel.RenderState.AlphaTestSettings.Equals(System.Object)"/>.
            </summary>
            <param name="lhs">The left object to compare</param>
            <param name="rhs">The right object to compare</param>
            <returns><c>true</c> if <paramref name="lhs"/> and <paramref name="rhs"/> are equal</returns>
        </member>
        <member name="M:SFGenericModel.RenderState.AlphaTestSettings.op_Inequality(SFGenericModel.RenderState.AlphaTestSettings,SFGenericModel.RenderState.AlphaTestSettings)">
            <summary>
            Compares <paramref name="lhs"/> and <paramref name="rhs"/>
            using <see cref="M:SFGenericModel.RenderState.AlphaTestSettings.Equals(System.Object)"/>.
            </summary>
            <param name="lhs">The left object to compare</param>
            <param name="rhs">The right object to compare</param>
            <returns><c>true</c> if <paramref name="lhs"/> and <paramref name="rhs"/> are not equal</returns>
        </member>
        <member name="M:SFGenericModel.RenderState.AlphaTestSettings.Equals(System.Object)">
            <summary>
            Compares the values of the object's fields with <paramref name="obj"/>
            </summary>
            <param name="obj">The object to compare with the current object</param>
            <returns><c>true</c> if the specified object is equal to the current object</returns>
        </member>
        <member name="M:SFGenericModel.RenderState.AlphaTestSettings.GetHashCode">
            <summary>
            Returns a hash code based on the object's fields.
            </summary>
            <returns>A hash code for the current object</returns>
        </member>
        <member name="T:SFGenericModel.RenderState.DepthTestSettings">
            <summary>
            The alpha blending state set before drawing a <see cref="T:SFGenericModel.GenericMesh`1"/>.
            </summary>
        </member>
        <member name="F:SFGenericModel.RenderState.DepthTestSettings.Default">
            <summary>
            The default depth test settings.
            </summary>
        </member>
        <member name="F:SFGenericModel.RenderState.DepthTestSettings.enabled">
            <summary>
            Enables or disables depth testing.
            </summary>
        </member>
        <member name="F:SFGenericModel.RenderState.DepthTestSettings.depthMask">
            <summary>
            Enables writes to the depth buffer when true.
            </summary>
        </member>
        <member name="F:SFGenericModel.RenderState.DepthTestSettings.depthFunction">
            <summary>
            The function used to determine if a fragment passes the depth test.
            </summary>
        </member>
        <member name="M:SFGenericModel.RenderState.DepthTestSettings.#ctor(System.Boolean,System.Boolean,OpenTK.Graphics.OpenGL.DepthFunction)">
            <summary>
            
            </summary>
            <param name="enabled"></param>
            <param name="depthMask"></param>
            <param name="depthFunction"></param>
        </member>
        <member name="M:SFGenericModel.RenderState.DepthTestSettings.op_Equality(SFGenericModel.RenderState.DepthTestSettings,SFGenericModel.RenderState.DepthTestSettings)">
            <summary>
            Compares <paramref name="lhs"/> and <paramref name="rhs"/>
            using <see cref="M:SFGenericModel.RenderState.DepthTestSettings.Equals(System.Object)"/>.
            </summary>
            <param name="lhs">The left object to compare</param>
            <param name="rhs">The right object to compare</param>
            <returns><c>true</c> if <paramref name="lhs"/> and <paramref name="rhs"/> are equal</returns>
        </member>
        <member name="M:SFGenericModel.RenderState.DepthTestSettings.op_Inequality(SFGenericModel.RenderState.DepthTestSettings,SFGenericModel.RenderState.DepthTestSettings)">
            <summary>
            Compares <paramref name="lhs"/> and <paramref name="rhs"/>
            using <see cref="M:SFGenericModel.RenderState.DepthTestSettings.Equals(System.Object)"/>.
            </summary>
            <param name="lhs">The left object to compare</param>
            <param name="rhs">The right object to compare</param>
            <returns><c>true</c> if <paramref name="lhs"/> and <paramref name="rhs"/> are not equal</returns>
        </member>
        <member name="M:SFGenericModel.RenderState.DepthTestSettings.Equals(System.Object)">
            <summary>
            Compares the values of the object's fields with <paramref name="obj"/>
            </summary>
            <param name="obj">The object to compare with the current object</param>
            <returns><c>true</c> if the specified object is equal to the current object</returns>
        </member>
        <member name="M:SFGenericModel.RenderState.DepthTestSettings.GetHashCode">
            <summary>
            Returns a hash code based on the object's fields.
            </summary>
            <returns>A hash code for the current object</returns>
        </member>
        <member name="T:SFGenericModel.RenderState.FaceCullingSettings">
            <summary>
            The face culling state set before drawing a <see cref="T:SFGenericModel.GenericMesh`1"/>.
            </summary>
        </member>
        <member name="F:SFGenericModel.RenderState.FaceCullingSettings.Default">
            <summary>
            The default face culling settings.
            </summary>
        </member>
        <member name="F:SFGenericModel.RenderState.FaceCullingSettings.enabled">
            <summary>
            Enables or disables face culling.
            </summary>
        </member>
        <member name="F:SFGenericModel.RenderState.FaceCullingSettings.cullFaceMode">
            <summary>
            Determines whether back and/or front faces will be culled.
            </summary>
        </member>
        <member name="M:SFGenericModel.RenderState.FaceCullingSettings.#ctor(System.Boolean,OpenTK.Graphics.OpenGL.CullFaceMode)">
            <summary>
            
            </summary>
            <param name="enabled"></param>
            <param name="cullFaceMode"></param>
        </member>
        <member name="M:SFGenericModel.RenderState.FaceCullingSettings.op_Equality(SFGenericModel.RenderState.FaceCullingSettings,SFGenericModel.RenderState.FaceCullingSettings)">
            <summary>
            Compares <paramref name="lhs"/> and <paramref name="rhs"/>
            using <see cref="M:SFGenericModel.RenderState.FaceCullingSettings.Equals(System.Object)"/>.
            </summary>
            <param name="lhs">The left object to compare</param>
            <param name="rhs">The right object to compare</param>
            <returns><c>true</c> if <paramref name="lhs"/> and <paramref name="rhs"/> are equal</returns>
        </member>
        <member name="M:SFGenericModel.RenderState.FaceCullingSettings.op_Inequality(SFGenericModel.RenderState.FaceCullingSettings,SFGenericModel.RenderState.FaceCullingSettings)">
            <summary>
            Compares <paramref name="lhs"/> and <paramref name="rhs"/>
            using <see cref="M:SFGenericModel.RenderState.FaceCullingSettings.Equals(System.Object)"/>.
            </summary>
            <param name="lhs">The left object to compare</param>
            <param name="rhs">The right object to compare</param>
            <returns><c>true</c> if <paramref name="lhs"/> and <paramref name="rhs"/> are not equal</returns>
        </member>
        <member name="M:SFGenericModel.RenderState.FaceCullingSettings.Equals(System.Object)">
            <summary>
            Compares the values of the object's fields with <paramref name="obj"/>
            </summary>
            <param name="obj">The object to compare with the current object</param>
            <returns><c>true</c> if the specified object is equal to the current object</returns>
        </member>
        <member name="M:SFGenericModel.RenderState.FaceCullingSettings.GetHashCode">
            <summary>
            Returns a hash code based on the object's fields.
            </summary>
            <returns>A hash code for the current object</returns>
        </member>
        <member name="T:SFGenericModel.RenderState.RenderSettings">
            <summary>
            Stores the rendering state used for drawing.
            The OpenGL state can be set using <see cref="M:SFGenericModel.RenderState.GLRenderSettings.SetRenderSettings(SFGenericModel.RenderState.RenderSettings,SFGenericModel.RenderState.RenderSettings)"/>.
            </summary>
        </member>
        <member name="F:SFGenericModel.RenderState.RenderSettings.polygonModeSettings">
            <summary>
            Controls the appearance of primitives.
            </summary>
        </member>
        <member name="F:SFGenericModel.RenderState.RenderSettings.alphaBlendSettings">
            <summary>
            Controls blending effects and alpha transparency.
            </summary>
        </member>
        <member name="F:SFGenericModel.RenderState.RenderSettings.alphaTestSettings">
            <summary>
            Controls discarding of fragments based on alpha.
            </summary>
        </member>
        <member name="F:SFGenericModel.RenderState.RenderSettings.depthTestSettings">
            <summary>
            Controls discarding of fragments based on depth.
            </summary>
        </member>
        <member name="F:SFGenericModel.RenderState.RenderSettings.faceCullingSettings">
            <summary>
            Controls which faces are culled.
            </summary>
        </member>
        <member name="M:SFGenericModel.RenderState.RenderSettings.Equals(System.Object)">
            <summary>
            Compares the values of the object's fields with <paramref name="obj"/>
            </summary>
            <param name="obj">The object to compare with the current object</param>
            <returns><c>true</c> if the specified object is equal to the current object</returns>
        </member>
        <member name="M:SFGenericModel.RenderState.RenderSettings.GetHashCode">
            <summary>
            Returns a hash code based on the object's fields.
            </summary>
            <returns>A hash code for the current object</returns>
        </member>
        <member name="T:SFGenericModel.RenderState.GLRenderSettings">
            <summary>
            Contains methods for updating OpenGL rendering state.
            </summary>
        </member>
        <member name="M:SFGenericModel.RenderState.GLRenderSettings.SetRenderSettings(SFGenericModel.RenderState.RenderSettings)">
            <summary>
            Updates the current OpenGL rendering state. 
            To improve performance, use <see cref="M:SFGenericModel.RenderState.GLRenderSettings.SetRenderSettings(SFGenericModel.RenderState.RenderSettings,SFGenericModel.RenderState.RenderSettings)"/>.
            </summary>
            <param name="settings">The settings used to perform the update</param>
        </member>
        <member name="M:SFGenericModel.RenderState.GLRenderSettings.SetRenderSettings(SFGenericModel.RenderState.RenderSettings,SFGenericModel.RenderState.RenderSettings)">
            <summary>
            Updates the current OpenGL rendering state. 
            To improve performance, no OpenGL functions are called for identical values for
            <paramref name="settings"/> and <paramref name="previousSettings"/>.
            </summary>
            <param name="settings">The settings used to perform the update</param>
            <param name="previousSettings">The settings used for the previous update</param>
        </member>
        <member name="M:SFGenericModel.RenderState.GLRenderSettings.SetPolygonModeSettings(SFGenericModel.RenderState.PolygonModeSettings,SFGenericModel.RenderState.PolygonModeSettings)">
            <summary>
            Updates the current OpenGL rendering state based on <paramref name="settings"/>.
            </summary>
            <param name="settings">The settings used to perform the update</param>
            <param name="previousSettings">The settings used for the previous update</param>
        </member>
        <member name="M:SFGenericModel.RenderState.GLRenderSettings.SetFaceCulling(SFGenericModel.RenderState.FaceCullingSettings,SFGenericModel.RenderState.FaceCullingSettings)">
            <summary>
            Updates the current OpenGL rendering state based on <paramref name="settings"/>.
            </summary>
            <param name="settings">The settings used to perform the update</param>
            <param name="previousSettings">The settings used for the previous update</param>
        </member>
        <member name="M:SFGenericModel.RenderState.GLRenderSettings.SetDepthTesting(SFGenericModel.RenderState.DepthTestSettings,SFGenericModel.RenderState.DepthTestSettings)">
            <summary>
            Updates the current OpenGL rendering state based on <paramref name="settings"/>.
            </summary>
            <param name="settings">The settings used to perform the update</param>
            <param name="previousSettings">The settings used for the previous update</param>
        </member>
        <member name="M:SFGenericModel.RenderState.GLRenderSettings.SetAlphaBlending(SFGenericModel.RenderState.AlphaBlendSettings,SFGenericModel.RenderState.AlphaBlendSettings)">
            <summary>
            Updates the current OpenGL rendering state based on <paramref name="settings"/>.
            </summary>
            <param name="settings">The settings used to perform the update</param>
            <param name="previousSettings">The settings used for the previous update</param>
        </member>
        <member name="M:SFGenericModel.RenderState.GLRenderSettings.SetPolygonModeSettings(SFGenericModel.RenderState.PolygonModeSettings)">
            <summary>
            Updates the current OpenGL rendering state based on <paramref name="settings"/>.
            </summary>
            <param name="settings">The settings used to perform the update</param>
        </member>
        <member name="M:SFGenericModel.RenderState.GLRenderSettings.SetAlphaTesting(SFGenericModel.RenderState.AlphaTestSettings,SFGenericModel.RenderState.AlphaTestSettings)">
            <summary>
            Updates the current OpenGL rendering state based on <paramref name="settings"/>.
            </summary>
            <param name="settings">The settings used to perform the update</param>
            <param name="previousSettings">The settings used for the previous update</param>
        </member>
        <member name="M:SFGenericModel.RenderState.GLRenderSettings.SetFaceCulling(SFGenericModel.RenderState.FaceCullingSettings)">
            <summary>
            Updates the current OpenGL rendering state based on <paramref name="settings"/>.
            </summary>
            <param name="settings">The settings used to perform the update</param>
        </member>
        <member name="M:SFGenericModel.RenderState.GLRenderSettings.SetDepthTesting(SFGenericModel.RenderState.DepthTestSettings)">
            <summary>
            Updates the current OpenGL rendering state based on <paramref name="settings"/>.
            </summary>
            <param name="settings">The settings used to perform the update</param>
        </member>
        <member name="M:SFGenericModel.RenderState.GLRenderSettings.SetAlphaBlending(SFGenericModel.RenderState.AlphaBlendSettings)">
            <summary>
            Updates the current OpenGL rendering state based on <paramref name="settings"/>.
            </summary>
            <param name="settings">The settings used to perform the update</param>
        </member>
        <member name="M:SFGenericModel.RenderState.GLRenderSettings.SetAlphaTesting(SFGenericModel.RenderState.AlphaTestSettings)">
            <summary>
            Updates the current OpenGL rendering state based on <paramref name="settings"/>.
            </summary>
            <param name="settings">The settings used to perform the update</param>
        </member>
        <member name="T:SFGenericModel.ShaderGenerators.GlslShaderUtils.CaseStatement">
            <summary>
            Stores information for the cases of a switch statement.
            </summary>
        </member>
        <member name="P:SFGenericModel.ShaderGenerators.GlslShaderUtils.CaseStatement.SwitchValue">
            <summary>
            The value for this case.
            </summary>
        </member>
        <member name="P:SFGenericModel.ShaderGenerators.GlslShaderUtils.CaseStatement.CaseBody">
            <summary>
            The code to be executed.
            </summary>
        </member>
        <member name="T:SFGenericModel.ShaderGenerators.UvCoord">
            <summary>
            The texture coordinate values used for rendering.
            </summary>
        </member>
        <member name="F:SFGenericModel.ShaderGenerators.UvCoord.TexCoord0">
            <summary>
            The first UV channel.
            </summary>
        </member>
        <member name="F:SFGenericModel.ShaderGenerators.UvCoord.CamEnvSphere">
            <summary>
            View normals remapped to the 0 to 1 range.
            </summary>
        </member>
        <member name="F:SFGenericModel.ShaderGenerators.UvCoord.CubeMap">
            <summary>
            A three component reflection vector used for cube maps.
            </summary>
        </member>
        <member name="T:SFGenericModel.ShaderGenerators.TextureSwizzle">
            <summary>
            The channels of the texture assigned to the output color.
            </summary>
        </member>
        <member name="F:SFGenericModel.ShaderGenerators.TextureSwizzle.Rgb">
            <summary>
            Use the red, green, and blue channels. Alpha is set to 1.
            </summary>
        </member>
        <member name="F:SFGenericModel.ShaderGenerators.TextureSwizzle.R">
            <summary>
            Use the red channel for the output RGB channels. Alpha is set to 1.
            </summary>
        </member>
        <member name="F:SFGenericModel.ShaderGenerators.TextureSwizzle.G">
            <summary>
            Use the green channel for the output RGB channels. Alpha is set to 1.
            </summary>
        </member>
        <member name="F:SFGenericModel.ShaderGenerators.TextureSwizzle.B">
            <summary>
            Use the blue channel for the output RGB channels. Alpha is set to 1.
            </summary>
        </member>
        <member name="F:SFGenericModel.ShaderGenerators.TextureSwizzle.A">
            <summary>
            Use the alpha channel for the output RGB channels. Alpha is set to 1.
            </summary>
        </member>
        <member name="T:SFGenericModel.ShaderGenerators.TextureRenderInfo">
            <summary>
            Determines how a <see cref="T:SFGraphics.GLObjects.Textures.Texture"/> should be rendered for generated shaders.
            </summary>
        </member>
        <member name="P:SFGenericModel.ShaderGenerators.TextureRenderInfo.Name">
            <summary>
            The name of the texture uniform variable.
            </summary>
        </member>
        <member name="P:SFGenericModel.ShaderGenerators.TextureRenderInfo.UvCoord">
            <summary>
            Determines what UV coordinates will be used
            </summary>
        </member>
        <member name="P:SFGenericModel.ShaderGenerators.TextureRenderInfo.TextureSwizzle">
            <summary>
            The channels of the texture that will be assigned to the output
            </summary>
        </member>
        <member name="M:SFGenericModel.ShaderGenerators.TextureRenderInfo.#ctor(System.String,SFGenericModel.ShaderGenerators.UvCoord,SFGenericModel.ShaderGenerators.TextureSwizzle)">
            <summary>
            
            </summary>
            <param name="name">The value for <see cref="P:SFGenericModel.ShaderGenerators.TextureRenderInfo.Name"/></param>
            <param name="uvCoord">The value for <see cref="P:SFGenericModel.ShaderGenerators.TextureRenderInfo.UvCoord"/></param>
            <param name="textureSwizzle">The value for <see cref="P:SFGenericModel.ShaderGenerators.TextureRenderInfo.TextureSwizzle"/></param>
        </member>
        <member name="T:SFGenericModel.ShaderGenerators.TextureShaderGenerator">
            <summary>
            Contains methods for generating a texture debug shader. 
            The swizzling and texture coordinate display is controlled per texture.
            </summary>
        </member>
        <member name="P:SFGenericModel.ShaderGenerators.TextureShaderGenerator.MvpMatrixName">
            <summary>
            The variable name used for the model view projection matrix.
            </summary>
        </member>
        <member name="P:SFGenericModel.ShaderGenerators.TextureShaderGenerator.SphereMatrixName">
            <summary>
            The variable name used for transforming normals to view space.
            </summary>
        </member>
        <member name="P:SFGenericModel.ShaderGenerators.TextureShaderGenerator.GlslVersionMajor">
            <summary>
            The minor shading language version. Ex: 4.20 is major version 4.
            </summary>
        </member>
        <member name="P:SFGenericModel.ShaderGenerators.TextureShaderGenerator.GlslVersionMinor">
            <summary>
            The minor shading language version. Ex: 4.20 is minor version 2.
            </summary>
        </member>
        <member name="M:SFGenericModel.ShaderGenerators.TextureShaderGenerator.CreateShader``1(System.Collections.Generic.List{SFGenericModel.ShaderGenerators.TextureRenderInfo},System.String@,System.String@)">
            <summary>
            Generates a shader for rendering each of the specified textures individually.
            </summary>
            <typeparam name="T">The vertex struct used for rendering</typeparam>
            <param name="textures">Textures used to generate render modes</param>
            <param name="vertexSource">The generated GLSL vertex shader source</param>
            <param name="fragmentSource">The generated GLSL fragment shader source</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The struct has no attributes.</exception>
            <exception cref="T:System.ArgumentException">The struct's attributes do not contain attributes with the required usages.</exception>
        </member>
        <member name="M:SFGenericModel.ShaderGenerators.TextureShaderGenerator.CreateShader(System.Collections.Generic.List{SFGenericModel.ShaderGenerators.TextureRenderInfo},System.Collections.Generic.ICollection{SFGenericModel.VertexAttributes.VertexAttribute},System.String@,System.String@)">
            <summary>
            Generates a shader for rendering each of the specified textures individually.
            </summary>
            <param name="textures">Textures used to generate render modes</param>
            <param name="attributes">The vertex attributes used for rendering</param>
            <param name="vertexSource">The generated GLSL vertex shader source</param>
            <param name="fragmentSource">The generated GLSL fragment shader source</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="attributes"/> is empty.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="attributes"/> does not contain attributes with the required usages.</exception>
        </member>
        <member name="T:SFGenericModel.ShaderGenerators.VertexAttributeShaderGenerator">
            <summary>
            Contains methods for automatically generating a debug shader for
            viewing vertex attributes. 
            </summary>
        </member>
        <member name="P:SFGenericModel.ShaderGenerators.VertexAttributeShaderGenerator.MvpMatrixName">
            <summary>
            The variable name used for the model view projection matrix.
            </summary>
        </member>
        <member name="P:SFGenericModel.ShaderGenerators.VertexAttributeShaderGenerator.SphereMatrixName">
            <summary>
            The variable name used for transforming normals to view space.
            </summary>
        </member>
        <member name="P:SFGenericModel.ShaderGenerators.VertexAttributeShaderGenerator.AttribIndexName">
            <summary>
            The variable name used for selecting the 0 indexed attribute to render.
            </summary>
        </member>
        <member name="P:SFGenericModel.ShaderGenerators.VertexAttributeShaderGenerator.GlslVersionMajor">
            <summary>
            The minor shading language version. Ex: 4.20 is major version 4.
            </summary>
        </member>
        <member name="P:SFGenericModel.ShaderGenerators.VertexAttributeShaderGenerator.GlslVersionMinor">
            <summary>
            The minor shading language version. Ex: 4.20 is minor version 2.
            </summary>
        </member>
        <member name="M:SFGenericModel.ShaderGenerators.VertexAttributeShaderGenerator.CreateShader``1(System.String@,System.String@)">
            <summary>
            Generates a shader for rendering each of the vertex attributes individually. 
            </summary>
            <typeparam name="T">The vertex struct containing the <see cref="T:SFGenericModel.VertexAttributes.VertexAttribute"/> attributes.</typeparam>
            <param name="vertexSource">The generated GLSL vertex shader source</param>
            <param name="fragmentSource">The generated GLSL fragment shader source</param>
        </member>
        <member name="M:SFGenericModel.ShaderGenerators.VertexAttributeShaderGenerator.CreateShader(System.Collections.Generic.List{SFGenericModel.VertexAttributes.VertexAttribute},System.String@,System.String@)">
            <summary>
            Generates a shader for rendering each of the vertex attributes individually.      
            </summary>
            <param name="attributes">Attributes used to generate render modes</param>
            <param name="vertexSource">The generated GLSL vertex shader source</param>
            <param name="fragmentSource">The generated GLSL fragment shader source</param>
        </member>
        <member name="T:SFGenericModel.Utils.IndexUtils">
            <summary>
            Contains methods for generating and manipulating vertex indices.
            </summary>
        </member>
        <member name="M:SFGenericModel.Utils.IndexUtils.GenerateIndices(System.Int32)">
            <summary>
            Generates consecutive indices starting with 0 
            up to but not including <paramref name="count"/>.
            </summary>
            <param name="count">The number of indices to generate</param>
            <returns>Generated consecutive indices</returns>
        </member>
        <member name="T:SFGenericModel.Utils.MeshBatchUtils">
            <summary>
            Contains methods for grouping vertex data to reduce draw calls and improve performance.
            </summary>
        </member>
        <member name="M:SFGenericModel.Utils.MeshBatchUtils.GroupContainersByPrimitiveType``1(System.Collections.Generic.IList{SFGenericModel.IndexedVertexData{``0}})">
            <summary>
            Creates a new collection of <see cref="T:SFGenericModel.IndexedVertexData`1"/> objects with 
            only a single container for types that support merging.
            </summary>
            <typeparam name="T">The vertex data struct</typeparam>
            <param name="containers">The unoptimized vertex containers</param>
            <returns><paramref name="containers"/> grouped by primitive type</returns>
        </member>
        <member name="T:SFGenericModel.VertexAttributes.AttribPointerUtils">
            <summary>
            Type information for converting from OpenGL vertex attributes to C#.
            </summary>
        </member>
        <member name="M:SFGenericModel.VertexAttributes.AttribPointerUtils.GetSizeInBytes(OpenTK.Graphics.OpenGL.VertexAttribPointerType)">
            <summary>
            Returns the size in bytes of the C# equivalent for a specified OpenGL attribute pointer type.
            </summary>
            <returns>The size of <paramref name="type"/> in bytes</returns>
            <exception cref="T:System.NotImplementedException">The size of <paramref name="type"/> is not implemented</exception>
        </member>
        <member name="M:SFGenericModel.VertexAttributes.AttribPointerUtils.GetSizeInBytes(OpenTK.Graphics.OpenGL.VertexAttribIntegerType)">
            <summary>
            Returns the size in bytes of the C# equivalent for a specified OpenGL attribute pointer type.
            </summary>
            <returns>The size of <paramref name="type"/> in bytes</returns>
            <exception cref="T:System.NotImplementedException">The size of <paramref name="type"/> is not implemented</exception>
        </member>
        <member name="T:SFGenericModel.VertexAttributes.ValueCount">
            <summary>
            The number of vector components for a vertex attribute. Scalars should use <see cref="F:SFGenericModel.VertexAttributes.ValueCount.One"/>.
            </summary>
        </member>
        <member name="F:SFGenericModel.VertexAttributes.ValueCount.One">
            <summary>
            A scalar value
            </summary>
        </member>
        <member name="F:SFGenericModel.VertexAttributes.ValueCount.Two">
            <summary>
            A two component vector value
            </summary>
        </member>
        <member name="F:SFGenericModel.VertexAttributes.ValueCount.Three">
            <summary>
            A three component vector value
            </summary>
        </member>
        <member name="F:SFGenericModel.VertexAttributes.ValueCount.Four">
            <summary>
            A four component vector value
            </summary>
        </member>
        <member name="T:SFGenericModel.VertexAttributes.AttributeUsage">
            <summary>
            Determines the additional usage for the generated shader.
            </summary>
        </member>
        <member name="F:SFGenericModel.VertexAttributes.AttributeUsage.Default">
            <summary>
            The attribute will only be used for the render modes.
            </summary>
        </member>
        <member name="F:SFGenericModel.VertexAttributes.AttributeUsage.Position">
            <summary>
            The attribute will also be used as the vertex positions.
            </summary>
        </member>
        <member name="F:SFGenericModel.VertexAttributes.AttributeUsage.Normal">
            <summary>
            The attribute will also be used as the vertex normals.
            </summary>
        </member>
        <member name="F:SFGenericModel.VertexAttributes.AttributeUsage.TexCoord0">
            <summary>
            The attribute will also be used as the vertex UVs.
            </summary>
        </member>
        <member name="T:SFGenericModel.VertexAttributes.VertexAttribute">
            <summary>
            Stores information for a vertex attribute variable.
            </summary>
        </member>
        <member name="P:SFGenericModel.VertexAttributes.VertexAttribute.Name">
            <summary>
            The name of the attribute in the shader.
            </summary>
        </member>
        <member name="P:SFGenericModel.VertexAttributes.VertexAttribute.ValueCount">
            <summary>
            The number of components. Ex: 1 for <see cref="T:System.Single"/> or
            4 for Vector4.
            </summary>
        </member>
        <member name="P:SFGenericModel.VertexAttributes.VertexAttribute.SizeInBytes">
            <summary>
            The total size of the attribute's data in bytes.
            </summary>
        </member>
        <member name="P:SFGenericModel.VertexAttributes.VertexAttribute.Type">
            <summary>
            The data type of the attribute value.
            </summary>
        </member>
        <member name="P:SFGenericModel.VertexAttributes.VertexAttribute.AttributeUsage">
            <summary>
            How the attribute should be used for generated shaders.
            </summary>
        </member>
        <member name="P:SFGenericModel.VertexAttributes.VertexAttribute.NormalizeVector">
            <summary>
            Normalize the vector before rendering.
            </summary>
        </member>
        <member name="P:SFGenericModel.VertexAttributes.VertexAttribute.RemapToVisibleRange">
            <summary>
            Remap values in range [-1, 1] to range [0, 1]. This occurs after normalization.
            </summary>
        </member>
        <member name="M:SFGenericModel.VertexAttributes.VertexAttribute.#ctor(System.String,SFGenericModel.VertexAttributes.ValueCount,OpenTK.Graphics.OpenGL.VertexAttribPointerType,SFGenericModel.VertexAttributes.AttributeUsage,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="name">The name of the attribute in the shader</param>
            <param name="valueCount">The number of components</param>
            <param name="type">The data type</param>
            <param name="attributeUsage">How the attribute will be rendered</param>
            <param name="normalizeVector">Normalize the vector before rendering</param>
            <param name="remapToVisibleRange">Remap the vector before rendering</param>
        </member>
        <member name="M:SFGenericModel.VertexAttributes.VertexAttribute.SetVertexAttribute(System.Int32,System.Int32,System.Int32)">
            <summary>
            Configures the vertex attribute for the currently bound array buffer.
            </summary>
            <param name="index">The index of the attribute variable in the shader</param>
            <param name="strideInBytes">The vertex size in bytes</param>
            <param name="offsetInBytes">The offset in bytes of the attribute in the vertex</param>
        </member>
        <member name="T:SFGenericModel.VertexAttributes.VertexIntAttribute">
            <summary>
            A vertex attribute that preserves integer values. Only integer types are supported.
            </summary>
        </member>
        <member name="M:SFGenericModel.VertexAttributes.VertexIntAttribute.#ctor(System.String,SFGenericModel.VertexAttributes.ValueCount,OpenTK.Graphics.OpenGL.VertexAttribIntegerType,SFGenericModel.VertexAttributes.AttributeUsage,System.Boolean,System.Boolean)">
            <summary>
            Creates a new vertex attribute.
            </summary>
            <param name="name">The name of the attribute in the shader</param>
            <param name="valueCount">The number of components for the value</param>
            <param name="type">The data type of the value</param>
            <param name="attributeUsage"></param>
            <param name="normalizeVector"></param>
            <param name="remapToVisibleRange"></param>
            <exception cref="T:System.NotSupportedException"><paramref name="type"/> is not 
            a supported attribute type.</exception>
        </member>
        <member name="M:SFGenericModel.VertexAttributes.VertexIntAttribute.#ctor(System.String,SFGenericModel.VertexAttributes.ValueCount,OpenTK.Graphics.OpenGL.VertexAttribIntegerType)">
            <summary>
            
            </summary>
            <param name="name">The name of the attribute</param>
            <param name="valueCount">The number of vector components</param>
            <param name="type">The data type</param>
        </member>
        <member name="M:SFGenericModel.VertexAttributes.VertexIntAttribute.SetVertexAttribute(System.Int32,System.Int32,System.Int32)">
            <summary>
            Configures the vertex attribute for the currently bound array buffer.
            </summary>
            <param name="index">The index of the attribute variable in the shader</param>
            <param name="strideInBytes">The vertex size in bytes</param>
            <param name="offsetInBytes">The offset in bytes of the attribute in the vertex</param>
        </member>
        <member name="T:SFGenericModel.VertexAttributes.VertexAttributeUtils">
            <summary>
            Methods for configuring vertex attributes for a <see cref="T:SFGraphics.GLObjects.Shaders.Shader"/>.
            </summary>
        </member>
        <member name="M:SFGenericModel.VertexAttributes.VertexAttributeUtils.SetVertexAttribute(SFGraphics.GLObjects.Shaders.Shader,SFGenericModel.VertexAttributes.VertexAttribute,System.Int32,System.Int32)">
            <summary>
            Configures a vertex attribute for the currently bound element array buffer.
            Returns false on error.
            </summary>
            <param name="shader">The current shader used for rendering</param>
            <param name="attribute">The vertex attribute information</param>
            <param name="offsetInBytes">The offset into the vertex data</param>
            <param name="strideInBytes">The size in bytes of each vertex</param>
            <returns><c>true</c> if the set was successful</returns>
        </member>
        <member name="M:SFGenericModel.VertexAttributes.VertexAttributeUtils.GetAttributesFromType``1">
            <summary>
            Gets the vertex attributes for the members of <typeparamref name="T"/>
            with the appropriate attribute.
            </summary>
            <typeparam name="T">The vertex struct type</typeparam>
            <returns>The vertex attributes for <typeparamref name="T"/></returns>
        </member>
        <member name="T:SFGenericModel.VertexAttributes.VertexFloatAttribute">
            <summary>
            A floating point vertex attribute. Integer types are converted directly to floats.
            </summary>
        </member>
        <member name="P:SFGenericModel.VertexAttributes.VertexFloatAttribute.Normalized">
            <summary>
            Integer types are converted to floating point when <c>true</c>.
            </summary>
        </member>
        <member name="M:SFGenericModel.VertexAttributes.VertexFloatAttribute.#ctor(System.String,SFGenericModel.VertexAttributes.ValueCount,OpenTK.Graphics.OpenGL.VertexAttribPointerType,System.Boolean,SFGenericModel.VertexAttributes.AttributeUsage,System.Boolean,System.Boolean)">
            <summary>
            Creates a new vertex attribute.
            </summary>
            <param name="name">The name of the attribute in the shader</param>
            <param name="valueCount">The number of components for the value</param>
            <param name="type">The data type of the value</param>
            <param name="normalized">Indicates whether integer types should be converted to floating point</param>
            <param name="attributeUsage">How the attribute should be rendered</param>
            <param name="normalizeVector">Normalize the vector before rendering</param>
            <param name="remapToVisibleRange">Remap the vector before rendering</param>
            <exception cref="T:System.NotImplementedException"><paramref name="type"/> is not an implemented attribute type.</exception>
        </member>
        <member name="M:SFGenericModel.VertexAttributes.VertexFloatAttribute.#ctor(System.String,SFGenericModel.VertexAttributes.ValueCount,OpenTK.Graphics.OpenGL.VertexAttribPointerType,System.Boolean)">
            <summary>
            Creates a new vertex attribute.
            </summary>
            <param name="name">The name of the attribute</param>
            <param name="valueCount">The number of vector components</param>
            <param name="type">The data type</param>
            <param name="normalized">Integer types are converted to floating point when <c>true</c></param>
        </member>
        <member name="M:SFGenericModel.VertexAttributes.VertexFloatAttribute.SetVertexAttribute(System.Int32,System.Int32,System.Int32)">
            <summary>
            Configures the vertex attribute for the currently bound array buffer.
            </summary>
            <param name="index">The index of the attribute variable in the shader</param>
            <param name="strideInBytes">The vertex size in bytes</param>
            <param name="offsetInBytes">The offset in bytes of the attribute in the vertex</param>
        </member>
        <member name="T:SFGenericModel.MeshEventArgs.AttribSetEventArgs">
            <summary>
            Contains the data used to set a shader uniform variable.
            </summary>
        </member>
        <member name="P:SFGenericModel.MeshEventArgs.AttribSetEventArgs.Name">
            <summary>
            The name of the attribute variable.
            </summary>
        </member>
        <member name="P:SFGenericModel.MeshEventArgs.AttribSetEventArgs.Type">
            <summary>
            The data type of the attribute variable
            </summary>
        </member>
        <member name="P:SFGenericModel.MeshEventArgs.AttribSetEventArgs.ValueCount">
            <summary>
            The number of components. Ex: 1 for <see cref="T:System.Single"/> or
            4 for <see cref="T:OpenTK.Vector4"/>.
            </summary>
        </member>
        <member name="M:SFGenericModel.MeshEventArgs.AttribSetEventArgs.#ctor(System.String,OpenTK.Graphics.OpenGL.VertexAttribPointerType,SFGenericModel.VertexAttributes.ValueCount)">
            <summary>
            
            </summary>
            <param name="name">The name of the attribute</param>
            <param name="type">The data type of the attribute</param>
            <param name="valueCount">The number of vector components or 1 for scalars</param>
        </member>
        <member name="T:SFGenericModel.GenericMesh`1">
            <summary>
            A class for drawing indexed, generic vertex data using a user defined 
            vertex struct <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The struct used to define vertex data</typeparam>
        </member>
        <member name="P:SFGenericModel.GenericMesh`1.VertexCount">
            <summary>
            The number of vertices stored in the buffers used for drawing.
            </summary>
        </member>
        <member name="P:SFGenericModel.GenericMesh`1.PrimitiveType">
            <summary>
            Determines how primitives will be constructed from the vertex data.
            </summary>
        </member>
        <member name="P:SFGenericModel.GenericMesh`1.DrawElementsType">
            <summary>
            Specifies the data type of the index values.
            </summary>
        </member>
        <member name="T:SFGenericModel.GenericMesh`1.InvalidAttribSetEventHandler">
            <summary>
            Contains information about the arguments used to set a vertex attribute.
            </summary>
            <param name="sender">The <see cref="T:SFGenericModel.GenericMesh`1"/> 
            instance that generated the error</param>
            <param name="e">The vertex attribute information</param>
        </member>
        <member name="E:SFGenericModel.GenericMesh`1.OnInvalidAttribSet">
            <summary>
            Occurs when specified vertex attribute information does not match the shader.
            </summary>
        </member>
        <member name="F:SFGenericModel.GenericMesh`1.vertexAttributes">
            <summary>
            Initialized by default using the member attributes of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:SFGenericModel.GenericMesh`1.#ctor(`0[],OpenTK.Graphics.OpenGL.PrimitiveType)">
            <summary>
            Creates a new mesh and initializes the vertex buffer data.
            An index is generated for each vertex in <paramref name="vertices"/>.
            </summary>
            <param name="vertices">The vertex data</param>
            <param name="primitiveType">Determines how primitives will be constructed from the vertex data</param>
        </member>
        <member name="M:SFGenericModel.GenericMesh`1.#ctor(`0[],System.Int32[],OpenTK.Graphics.OpenGL.PrimitiveType)">
            <summary>
            Creates a new mesh and initializes the vertex buffer data.
            </summary>
            <param name="vertices">The vertex data</param>
            <param name="vertexIndices">The vertex index data</param>
            <param name="primitiveType">Determines how primitives will be constructed from the vertex data</param>
        </member>
        <member name="M:SFGenericModel.GenericMesh`1.#ctor(`0[],System.UInt32[],OpenTK.Graphics.OpenGL.PrimitiveType)">
            <summary>
            Creates a new mesh and initializes the vertex buffer data.
            </summary>
            <param name="vertices">The vertex data</param>
            <param name="vertexIndices">The vertex index data</param>
            <param name="primitiveType">Determines how primitives will be constructed from the vertex data</param>
        </member>
        <member name="M:SFGenericModel.GenericMesh`1.#ctor(SFGenericModel.IndexedVertexData{`0})">
            <summary>
            Creates a new mesh and initializes the vertex buffer data.
            </summary>
            <param name="vertexData">Contains the vertices, indices, and primitive type</param>
        </member>
        <member name="M:SFGenericModel.GenericMesh`1.Draw(SFGraphics.GLObjects.Shaders.Shader,System.Int32,System.Int32)">
            <summary>
            Draws the geometry data.
            </summary>
            <param name="shader">The shader used for drawing</param>
            <param name="count">The number of vertices to draw</param>
            <param name="offset">The offset into the index buffer</param>
        </member>
        <member name="M:SFGenericModel.GenericMesh`1.Draw(SFGraphics.GLObjects.Shaders.Shader)">
            <summary>
            Draws the geometry data.
            </summary>
            <param name="shader">The shader used for drawing</param>
        </member>
    </members>
</doc>
