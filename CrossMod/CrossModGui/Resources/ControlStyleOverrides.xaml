<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:CrossModGui"
                    xmlns:adonisUi="clr-namespace:AdonisUI;assembly=AdonisUI"
                    xmlns:adonisExtensions="clr-namespace:AdonisUI.Extensions;assembly=AdonisUI"
                    xmlns:adonisConverters="clr-namespace:AdonisUI.Converters;assembly=AdonisUI"
                    xmlns:adonisControls="clr-namespace:AdonisUI.Controls;assembly=AdonisUI"
                    xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2" xmlns:system="clr-namespace:System;assembly=mscorlib">
    <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="adonisExtensions:RippleExtension.FadeInDuration" Value="0"></Setter>
        <Setter Property="adonisExtensions:RippleExtension.FadeOutDuration" Value="0"></Setter>
    </Style>
    <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
        <Setter Property="adonisExtensions:RippleExtension.FadeInDuration" Value="0"></Setter>
        <Setter Property="adonisExtensions:RippleExtension.FadeOutDuration" Value="0"></Setter>
    </Style>
    <Style TargetType="CheckBox">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.ForegroundBrush}}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer1BackgroundBrush}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer1BorderBrush}}"/>
        <Setter Property="BorderThickness" Value="{DynamicResource {x:Static adonisUi:Dimensions.BorderThickness}}"/>
        <Setter Property="adonisExtensions:CornerRadiusExtension.CornerRadius" Value="{DynamicResource {x:Static adonisUi:Dimensions.CornerRadius}}"/>
        <Setter Property="Padding" Value="{adonisUi:Space 0.5, 0, 0, 0}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="False"/>
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
        <Setter Property="adonisExtensions:ValidationExtension.IsErrorMessageVisibleOnFocus" Value="True"/>
        <Setter Property="adonisExtensions:ValidationExtension.IsErrorMessageVisibleOnMouseOver" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <BulletDecorator Background="Transparent"
                                     SnapsToDevicePixels="False">
                        <BulletDecorator.Bullet>
                            <Border x:Name="Border"
                                    Width="14"
                                    Height="14"
                                    CornerRadius="{TemplateBinding adonisExtensions:CornerRadiusExtension.CornerRadius}"
                                    Background="{TemplateBinding Background}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    BorderBrush="{TemplateBinding BorderBrush}">

                                <Viewbox Stretch="Uniform"
                                         Margin="2">

                                    <Grid>
                                        <Path x:Name="CheckMark"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              Stroke="{TemplateBinding Foreground}"
                                              StrokeThickness="2"
                                              Data="M 1 3 L 4 6 L 10 0" />

                                        <Border x:Name="CheckMarkNullState"
                                                Width="7"
                                                Height="7"
                                                Background="{TemplateBinding Foreground}"
                                                Visibility="Collapsed">
                                            <Border.CornerRadius>
                                                <MultiBinding Converter="{x:Static adonisConverters:ValuesToCornerRadiusConverter.Instance}">
                                                    <Binding Path="(adonisExtensions:CornerRadiusExtension.CornerRadius).TopLeft"
                                                             RelativeSource="{RelativeSource TemplatedParent}"
                                                             Converter="{adonisConverters:MathConverter}"
                                                             ConverterParameter="x/2"/>
                                                    <Binding Path="(adonisExtensions:CornerRadiusExtension.CornerRadius).TopRight"
                                                             RelativeSource="{RelativeSource TemplatedParent}"
                                                             Converter="{adonisConverters:MathConverter}"
                                                             ConverterParameter="x/2"/>
                                                    <Binding Path="(adonisExtensions:CornerRadiusExtension.CornerRadius).BottomRight"
                                                             RelativeSource="{RelativeSource TemplatedParent}"
                                                             Converter="{adonisConverters:MathConverter}"
                                                             ConverterParameter="x/2"/>
                                                    <Binding Path="(adonisExtensions:CornerRadiusExtension.CornerRadius).BottomLeft"
                                                             RelativeSource="{RelativeSource TemplatedParent}"
                                                             Converter="{adonisConverters:MathConverter}"
                                                             ConverterParameter="x/2"/>
                                                </MultiBinding>
                                            </Border.CornerRadius>
                                        </Border>
                                    </Grid>
                                </Viewbox>
                            </Border>
                        </BulletDecorator.Bullet>

                        <DockPanel>

                            <adonisControls:ValidationErrorIndicator x:Name="ErrorAlertHost"
                                                                     ValidatedElement="{Binding ., RelativeSource={RelativeSource TemplatedParent}}"
                                                                     IsValidatedElementFocused="{Binding IsFocused, RelativeSource={RelativeSource TemplatedParent}}"
                                                                     IsErrorMessageDisplayOnFocusEnabled="{TemplateBinding adonisExtensions:ValidationExtension.IsErrorMessageVisibleOnFocus}"
                                                                     IsErrorMessageDisplayOnMouseOverEnabled="{TemplateBinding adonisExtensions:ValidationExtension.IsErrorMessageVisibleOnMouseOver}"
                                                                     ErrorMessagePlacement="{TemplateBinding adonisExtensions:ValidationExtension.ErrorMessagePlacement}"
                                                                     Visibility="Collapsed"
                                                                     DockPanel.Dock="Left"
                                                                     IconWidth="18"
                                                                     IconHeight="18"
                                                                     Margin="4, 0, 0, 0"/>

                            <ContentPresenter Margin="{TemplateBinding Padding}"
                                              VerticalAlignment="Center"
                                              HorizontalAlignment="Left"
                                              RecognizesAccessKey="True"/>

                        </DockPanel>
                    </BulletDecorator>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="CheckMarkNullState" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="Validation.HasError" Value="True">
                            <Setter Property="Visibility" TargetName="ErrorAlertHost" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>

            <DataTrigger Binding="{Binding Path=(adonisExtensions:LayerExtension.ComputedLayer), RelativeSource={RelativeSource Self}}" Value="2">
                <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer2BackgroundBrush}}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer2BorderBrush}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=(adonisExtensions:LayerExtension.ComputedLayer), RelativeSource={RelativeSource Self}}" Value="3">
                <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3BackgroundBrush}}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3BorderBrush}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=(adonisExtensions:LayerExtension.ComputedLayer), RelativeSource={RelativeSource Self}}" Value="4">
                <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer4BackgroundBrush}}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer4BorderBrush}}"/>
            </DataTrigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer1IntenseHighlightBrush}}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer1IntenseHighlightBorderBrush}}"/>
            </Trigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(adonisExtensions:LayerExtension.ComputedLayer), RelativeSource={RelativeSource Self}}" Value="2"/>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer2IntenseHighlightBrush}}"/>
                    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer2IntenseHighlightBorderBrush}}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(adonisExtensions:LayerExtension.ComputedLayer), RelativeSource={RelativeSource Self}}" Value="3"/>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3IntenseHighlightBrush}}"/>
                    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3IntenseHighlightBorderBrush}}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(adonisExtensions:LayerExtension.ComputedLayer), RelativeSource={RelativeSource Self}}" Value="4"/>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer4IntenseHighlightBrush}}"/>
                    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer4IntenseHighlightBorderBrush}}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentBrush}}"/>
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.DisabledForegroundBrush}}"/>
                <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer0BackgroundBrush}}"/>
            </Trigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(adonisExtensions:LayerExtension.ComputedLayer), RelativeSource={RelativeSource Self}}" Value="2"/>
                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer1BackgroundBrush}}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(adonisExtensions:LayerExtension.ComputedLayer), RelativeSource={RelativeSource Self}}" Value="3"/>
                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer2BackgroundBrush}}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(adonisExtensions:LayerExtension.ComputedLayer), RelativeSource={RelativeSource Self}}" Value="4"/>
                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3BackgroundBrush}}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.ErrorBrush}}"/>
            </Trigger>

        </Style.Triggers>
    </Style>
    <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent"
                              SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>

                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="-90"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>

                                <Ellipse x:Name="Circle"
                                         Stroke="{TemplateBinding BorderBrush}"
                                         HorizontalAlignment="Center"
                                         VerticalAlignment="Center"
                                         Height="19"
                                         Width="19"/>

                                <ContentControl x:Name="Arrow"
                                                ContentTemplate="{DynamicResource {x:Static adonisUi:Templates.Expander}}"
                                                Foreground="{TemplateBinding BorderBrush}"
                                                Grid.Column="0"
                                                Focusable="False"
                                                HorizontalAlignment="Center"
                                                VerticalAlignment="Center"
                                                RenderTransformOrigin="0.5 0.5">
                                    <ContentControl.RenderTransform>
                                        <RotateTransform Angle="0"/>
                                    </ContentControl.RenderTransform>
                                </ContentControl>
                            </Grid>

                            <ContentPresenter HorizontalAlignment="Center"
                                              Margin="0,4,0,0"
                                              Grid.Row="1"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="True"
                                              VerticalAlignment="Top"/>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Arrow"
                                                         Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(RotateTransform.Angle)"
                                                         To="-180"
                                                         Duration="0:0:0.2"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Arrow"
                                                         Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)"
                                                         To="0"
                                                         Duration="0:0:0.2"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent"
                              SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="180"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>

                                <Ellipse x:Name="Circle"
                                         Stroke="{TemplateBinding BorderBrush}"
                                         HorizontalAlignment="Center"
                                         VerticalAlignment="Center"
                                         Height="19"
                                         Width="19"/>

                                <ContentControl x:Name="Arrow"
                                                ContentTemplate="{DynamicResource {x:Static adonisUi:Templates.Expander}}"
                                                Foreground="{TemplateBinding BorderBrush}"
                                                Grid.Column="0"
                                                Focusable="False"
                                                HorizontalAlignment="Center"
                                                VerticalAlignment="Center"
                                                RenderTransformOrigin="0.5 0.5">
                                    <ContentControl.RenderTransform>
                                        <RotateTransform Angle="0"/>
                                    </ContentControl.RenderTransform>
                                </ContentControl>
                            </Grid>

                            <ContentPresenter Grid.Column="1"
                                              HorizontalAlignment="Left"
                                              Margin="4,0,0,0"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="True"
                                              VerticalAlignment="Center"/>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Arrow"
                                                         Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(RotateTransform.Angle)"
                                                         To="-180"
                                                         Duration="0:0:0.2"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Arrow"
                                                         Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)"
                                                         To="0"
                                                         Duration="0:0:0.2"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent"
                              SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>

                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="90"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>

                                <Ellipse x:Name="Circle"
                                         Stroke="{TemplateBinding BorderBrush}"
                                         HorizontalAlignment="Center"
                                         VerticalAlignment="Center"
                                         Height="19"
                                         Width="19"/>

                                <ContentControl x:Name="Arrow"
                                                ContentTemplate="{DynamicResource {x:Static adonisUi:Templates.Expander}}"
                                                Foreground="{TemplateBinding BorderBrush}"
                                                Grid.Column="0"
                                                Focusable="False"
                                                HorizontalAlignment="Center"
                                                VerticalAlignment="Center"
                                                RenderTransformOrigin="0.5 0.5">
                                    <ContentControl.RenderTransform>
                                        <RotateTransform Angle="0"/>
                                    </ContentControl.RenderTransform>
                                </ContentControl>
                            </Grid>

                            <ContentPresenter HorizontalAlignment="Center"
                                              Margin="0,4,0,0"
                                              Grid.Row="1"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="True"
                                              VerticalAlignment="Top"/>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Arrow"
                                                         Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(RotateTransform.Angle)"
                                                         To="-180"
                                                         Duration="0:0:0.2"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Arrow"
                                                         Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)"
                                                         To="0"
                                                         Duration="0:0:0.2"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderHeaderFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="0"
                                   SnapsToDevicePixels="True"
                                   Stroke="Black"
                                   StrokeThickness="1"
                                   StrokeDashArray="1 2"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent"
                              SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <Ellipse x:Name="Circle"
                                     Stroke="{TemplateBinding BorderBrush}"
                                     HorizontalAlignment="Center"
                                     VerticalAlignment="Center"
                                     Height="19"
                                     Width="19"/>

                            <ContentControl x:Name="Arrow"
                                            ContentTemplate="{DynamicResource {x:Static adonisUi:Templates.Expander}}"
                                            Foreground="{TemplateBinding BorderBrush}"
                                            Grid.Column="0"
                                            Focusable="False"
                                            HorizontalAlignment="Center"
                                            VerticalAlignment="Center"
                                            RenderTransformOrigin="0.5 0.5">
                                <ContentControl.RenderTransform>
                                    <RotateTransform Angle="0"/>
                                </ContentControl.RenderTransform>
                            </ContentControl>

                            <ContentPresenter Grid.Column="1"
                                              HorizontalAlignment="Stretch"
                                              Margin="4,0,0,0"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="True"
                                              VerticalAlignment="Center"/>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Arrow"
                                                         Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(RotateTransform.Angle)"
                                                         To="-180"
                                                         Duration="0:0:0.2"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Arrow"
                                                         Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)"
                                                         To="0"
                                                         Duration="0:0:0.2"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type Expander}" TargetType="{x:Type Expander}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.ForegroundBrush}}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer1BackgroundBrush}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.ForegroundBrush}}"/>
        <Setter Property="BorderThickness" Value="{DynamicResource {x:Static adonisUi:Dimensions.BorderThickness}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Top"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border>
                        <DockPanel>
                            <ToggleButton x:Name="HeaderSite"
                                          ContentTemplate="{TemplateBinding HeaderTemplate}"
                                          ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                          Content="{TemplateBinding Header}"
                                          DockPanel.Dock="Top"
                                          Foreground="{TemplateBinding Foreground}"
                                          FontWeight="{TemplateBinding FontWeight}"
                                          FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}"
                                          FontStyle="{TemplateBinding FontStyle}"
                                          FontStretch="{TemplateBinding FontStretch}"
                                          FontSize="{TemplateBinding FontSize}"
                                          FontFamily="{TemplateBinding FontFamily}"
                                          HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                          IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                          BorderBrush="{TemplateBinding BorderBrush}"
                                          Style="{StaticResource ExpanderDownHeaderStyle}"/>

                            <Border x:Name="ExpandSiteContainerWrapper"
                                    DockPanel.Dock="Bottom"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}">

                                <ScrollViewer x:Name="ExpandSiteContainer"
                                              Padding="0"
                                              Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              HorizontalContentAlignment="Stretch"
                                              VerticalContentAlignment="Bottom"
                                              VerticalScrollBarVisibility="Hidden"
                                              HorizontalScrollBarVisibility="Hidden">
                                    <ScrollViewer.Height>
                                        <MultiBinding Converter="{adonisConverters:MathConverter}" ConverterParameter="x*y">
                                            <Binding Path="ActualHeight" ElementName="ExpandSite"/>
                                            <Binding Path="Tag" RelativeSource="{RelativeSource Self}"/>
                                        </MultiBinding>
                                    </ScrollViewer.Height>
                                    <ScrollViewer.Tag>
                                        <system:Double>0.0</system:Double>
                                    </ScrollViewer.Tag>

                                    <ContentPresenter x:Name="ExpandSite"
                                                      Focusable="False"
                                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                </ScrollViewer>
                            </Border>
                        </DockPanel>
                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="ExpandDirection" Value="Up">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSiteContainerWrapper" Value="Top"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
                        </Trigger>

                        <Trigger Property="ExpandDirection" Value="Right">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSiteContainerWrapper" Value="Right"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
                            <Setter Property="Height" TargetName="ExpandSiteContainer" Value="Auto"/>
                            <Setter Property="Width" TargetName="ExpandSiteContainer">
                                <Setter.Value>
                                    <MultiBinding Converter="{adonisConverters:MathConverter}" ConverterParameter="x*y">
                                        <Binding Path="ActualWidth" ElementName="ExpandSite"/>
                                        <Binding Path="Tag" RelativeSource="{RelativeSource Self}" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </Trigger>

                        <Trigger Property="ExpandDirection" Value="Left">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSiteContainerWrapper" Value="Left"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
                            <Setter Property="Height" TargetName="ExpandSiteContainer" Value="Auto"/>
                            <Setter Property="Width" TargetName="ExpandSiteContainer">
                                <Setter.Value>
                                    <MultiBinding Converter="{adonisConverters:MathConverter}" ConverterParameter="x*y">
                                        <Binding Path="ActualWidth" ElementName="ExpandSite"/>
                                        <Binding Path="Tag" RelativeSource="{RelativeSource Self}" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ExpandDirection" Value="Down"/>
                                <Condition Property="VerticalContentAlignment" Value="Stretch"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Height" TargetName="ExpandSiteContainer">
                                <Setter.Value>
                                    <MultiBinding Converter="{adonisConverters:MathConverter}" ConverterParameter="x*y">
                                        <Binding Path="ActualHeight" ElementName="ExpandSiteContainerWrapper"/>
                                        <Binding Path="Tag" RelativeSource="{RelativeSource Self}" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ExpandDirection" Value="Up"/>
                                <Condition Property="VerticalContentAlignment" Value="Stretch"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Height" TargetName="ExpandSiteContainer">
                                <Setter.Value>
                                    <MultiBinding Converter="{adonisConverters:MathConverter}" ConverterParameter="x*y">
                                        <Binding Path="ActualHeight" ElementName="ExpandSiteContainerWrapper"/>
                                        <Binding Path="Tag" RelativeSource="{RelativeSource Self}" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ExpandDirection" Value="Right"/>
                                <Condition Property="HorizontalContentAlignment" Value="Stretch"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Width" TargetName="ExpandSiteContainer">
                                <Setter.Value>
                                    <MultiBinding Converter="{adonisConverters:MathConverter}" ConverterParameter="x*y">
                                        <Binding Path="ActualWidth" ElementName="ExpandSiteContainerWrapper"/>
                                        <Binding Path="Tag" RelativeSource="{RelativeSource Self}" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ExpandDirection" Value="Left"/>
                                <Condition Property="HorizontalContentAlignment" Value="Stretch"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Width" TargetName="ExpandSiteContainer">
                                <Setter.Value>
                                    <MultiBinding Converter="{adonisConverters:MathConverter}" ConverterParameter="x*y">
                                        <Binding Path="ActualWidth" ElementName="ExpandSiteContainerWrapper"/>
                                        <Binding Path="Tag" RelativeSource="{RelativeSource Self}" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>

                        <Trigger Property="IsExpanded" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ExpandSiteContainer"
                                                         Storyboard.TargetProperty="Tag"
                                                         To="1"
                                                         Duration="0:0:0.2"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ExpandSiteContainer"
                                                         Storyboard.TargetProperty="Tag"
                                                         To="0"
                                                         Duration="0:0:0.2"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="IsExpanded" Value="False">
                            <Setter Property="KeyboardNavigation.TabNavigation" TargetName="ExpandSite" Value="None"/>
                        </Trigger>

                        <Trigger Property="IsMouseOver" SourceName="HeaderSite" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentBrush}}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>

            <DataTrigger Binding="{Binding Path=(adonisExtensions:LayerExtension.ComputedLayer), RelativeSource={RelativeSource Self}}" Value="2">
                <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer2BackgroundBrush}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=(adonisExtensions:LayerExtension.ComputedLayer), RelativeSource={RelativeSource Self}}" Value="3">
                <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer3BackgroundBrush}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=(adonisExtensions:LayerExtension.ComputedLayer), RelativeSource={RelativeSource Self}}" Value="4">
                <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer4BackgroundBrush}}"/>
            </DataTrigger>

            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentBrush}}"/>
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.DisabledForegroundBrush}}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.DisabledForegroundBrush}}"/>
            </Trigger>

        </Style.Triggers>
    </Style>
</ResourceDictionary>