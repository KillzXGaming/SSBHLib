using CrossMod.Rendering;
using System.Collections.Generic;

namespace CrossModGui.ViewModels
{
    public class RenderSettingsWindowViewModel : ViewModelBase
    {
        // Workaround to get enums to work with MVVM.
        public Dictionary<RenderSettings.RenderMode, string> DescriptionByRenderMode { get; } = new Dictionary<RenderSettings.RenderMode, string>()
        {
            { RenderSettings.RenderMode.Shaded, "Shaded" },
            { RenderSettings.RenderMode.Basic, "Basic" },
            { RenderSettings.RenderMode.Col, "Col" },
            { RenderSettings.RenderMode.Prm, "Prm" },
            { RenderSettings.RenderMode.Nor, "Nor" },
            { RenderSettings.RenderMode.Emi, "Emi" },
            { RenderSettings.RenderMode.BakeLit, "BakeLit" },
            { RenderSettings.RenderMode.Gao, "Gao Maps" },
            { RenderSettings.RenderMode.Proj, "Proj Maps" },
            { RenderSettings.RenderMode.ColorSet, "ColorSet1" },
            { RenderSettings.RenderMode.Normals, "Normals" },
            { RenderSettings.RenderMode.Tangents, "Tangents" },
            { RenderSettings.RenderMode.Bitangents, "Bitangents (generated by shader)" },
            { RenderSettings.RenderMode.BakeUV, "bake1" },
            { RenderSettings.RenderMode.UVPattern, "UV Test Pattern" },
            { RenderSettings.RenderMode.ParamID, "Param Values" },
            { RenderSettings.RenderMode.MaterialID, "Material ID" }
        };

        public RenderSettings.RenderMode SelectedRenderMode { get; set; } = RenderSettings.RenderMode.Shaded;

        public bool ShowParamControls => SelectedRenderMode == RenderSettings.RenderMode.ParamID;

        public bool ShowChannelControls => SelectedRenderMode != RenderSettings.RenderMode.Shaded;

        public bool EnableBloom { get; set; }
        public float BloomIntensity { get; set; }

        public bool EnableDiffuse { get; set; }

        public bool EnableSpecular { get; set; }

        public bool EnableEmission { get; set; }

        public float DirectLightIntensity { get; set; }

        public float IndirectLightIntensity { get; set; }

        public bool EnableNorMaps { get; set; }

        public bool EnablePrmMetalness { get; set; }
        public bool EnablePrmRoughness { get; set; }
        public bool EnablePrmAo { get; set; }
        public bool EnablePrmSpecular { get; set; }


        public bool EnableVertexColor { get; set; }

        public bool EnableEdgeTint { get; set; }

        public bool EnableRed { get; set; }

        public bool EnableGreen { get; set; }

        public bool EnableBlue { get; set; }

        public bool EnableAlpha { get; set; }

        // TODO: This should use an enum and combobox.
        // The available items should be restricted to used material params (ex: not DiffuseTexture).
        public string ParamName { get; set; } = RenderSettings.Instance.ParamId.ToString();

        public static implicit operator RenderSettingsWindowViewModel(RenderSettings rhs)
        {
            return new RenderSettingsWindowViewModel
            {
                EnableRed = rhs.EnableRed,
                EnableGreen = rhs.EnableGreen,
                EnableBlue = rhs.EnableBlue,
                EnableAlpha = rhs.EnableAlpha,
                EnableDiffuse = rhs.EnableDiffuse,
                EnableEmission = rhs.EnableEmission,
                EnableEdgeTint = rhs.EnableRimLighting,
                EnableSpecular = rhs.EnableSpecular,
                SelectedRenderMode = rhs.ShadingMode,
                EnableVertexColor = rhs.RenderVertexColor,
                EnableNorMaps = rhs.RenderNorMaps,
                EnablePrmMetalness = rhs.RenderPrmMetalness,
                EnablePrmRoughness = rhs.RenderPrmRoughness,
                EnablePrmAo = rhs.RenderPrmAo,
                EnablePrmSpecular = rhs.RenderPrmSpecular,
                DirectLightIntensity = rhs.DirectLightIntensity,
                IndirectLightIntensity = rhs.DirectLightIntensity,
                EnableBloom = rhs.EnableBloom,
                BloomIntensity = rhs.BloomIntensity
            };
        }
    }
}
